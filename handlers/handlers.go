package handlers

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/dekatei/telegram-bot/base"
	"github.com/dekatei/telegram-bot/buttons"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

var AddState = map[int]map[string]interface{}{} // userID -> step data
const adminID = 288848928

func StartBot(bot *tgbotapi.BotAPI) {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates, _ := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.CallbackQuery != nil {
			HandleCallback(bot, update)
			continue
		}
		if update.Message == nil {
			continue
		}

		userID := update.Message.From.ID
		text := update.Message.Text
		chatID := update.Message.Chat.ID

		switch text {
		case "/start":
			msg := tgbotapi.NewMessage(chatID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
			msg.ReplyMarkup = buttons.MainMenu(userID)
			bot.Send(msg)

		case "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ":
			if userID != adminID {
				bot.Send(tgbotapi.NewMessage(chatID, "‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."))
				break
			}
			AddState[userID] = map[string]interface{}{}
			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:")
			msg.ReplyMarkup = dateKeyboard("add_date")
			bot.Send(msg)
		case "‚ûñ –£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ":
			if userID != adminID {
				bot.Send(tgbotapi.NewMessage(chatID, "‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."))
				break
			}
			lessons, err := base.GetAvailableLessons()
			if err != nil || len(lessons) == 0 {
				bot.Send(tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."))
				break
			}

			var rows [][]tgbotapi.InlineKeyboardButton
			for _, l := range lessons {
				label := fmt.Sprintf("%s ‚Äî %s", l.Title, l.Date[11:])
				callbackData := fmt.Sprintf("delete_lesson:%d", l.ID)
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(label, callbackData)))
			}

			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
			bot.Send(msg)

		case "üìÖ –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π":
			text, err := buttons.LessonsListMessage()
			if err != nil {
				text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π."
			}
			bot.Send(tgbotapi.NewMessage(chatID, text))

		case "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è":
			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:")
			msg.ReplyMarkup = dateKeyboard("register_date")
			bot.Send(msg)

		case "üë§ –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è":
			text, err := buttons.MyLessonsMessage(userID)
			if err != nil {
				text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π."
			}
			bot.Send(tgbotapi.NewMessage(chatID, text))

		default:
			bot.Send(tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é."))
		}
	}
}

func formatDate(d time.Time) string {
	months := [...]string{
		"—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
		"–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è",
	}
	return fmt.Sprintf("%02d %s", d.Day(), months[d.Month()-1])
}

// dateKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–Ω—è —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —É—Ä–æ–∫–∞–º–∏
func dateKeyboard(prefix string) tgbotapi.InlineKeyboardMarkup {
	dates, err := base.GetDatesWithAvailableLessons()
	if err != nil || len(dates) == 0 {
		return tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç", "none"),
			),
		)
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, d := range dates {
		//label := formatDate(d) // "09 –∏—é–ª—è"
		data := fmt.Sprintf("%s:%s", prefix, d)
		btn := tgbotapi.NewInlineKeyboardButtonData(d, data)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func HandleCallback(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	cb := update.CallbackQuery
	userID := cb.From.ID
	data := cb.Data

	switch {
	case strings.HasPrefix(data, "add_date:"):
		days, _ := strconv.Atoi(strings.TrimPrefix(data, "add_date:"))
		date := formatDate(time.Now().AddDate(0, 0, days))
		AddState[userID] = map[string]interface{}{
			"date":  date,
			"times": []string{},
		}

		rows := [][]tgbotapi.InlineKeyboardButton{}
		for hour := 10; hour <= 21; hour++ {
			label := fmt.Sprintf("%02d:00", hour)
			callback := "add_time_multi:" + label
			btn := tgbotapi.NewInlineKeyboardButtonData(label, callback)

			if hour%3 == 1 {
				rows = append(rows, []tgbotapi.InlineKeyboardButton{})
			}
			rows[len(rows)-1] = append(rows[len(rows)-1], btn)
		}
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ì–æ—Ç–æ–≤–æ", "add_time_done"),
		))

		msg := tgbotapi.NewMessage(cb.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω:")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
		bot.Send(msg)
	case strings.HasPrefix(data, "add_time_multi:"):
		timeStr := strings.TrimPrefix(data, "add_time_multi:")
		info := AddState[userID]
		if info == nil {
			bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, "‚ö†Ô∏è –ù–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."))
			return
		}

		times := info["times"].([]string)
		found := false
		for i, t := range times {
			if t == timeStr {
				// –£–¥–∞–ª—è–µ–º
				info["times"] = append(times[:i], times[i+1:]...)
				found = true
				break
			}
		}
		if !found {
			info["times"] = append(times, timeStr)
		}

		// –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏
		var rows [][]tgbotapi.InlineKeyboardButton
		times = info["times"].([]string)

		for hour := 10; hour <= 21; hour++ {
			label := fmt.Sprintf("%02d:00", hour)
			display := label
			for _, t := range times {
				if t == label {
					display = "‚úÖ " + label
					break
				}
			}
			btn := tgbotapi.NewInlineKeyboardButtonData(display, "add_time_multi:"+label)

			if hour%3 == 1 {
				rows = append(rows, []tgbotapi.InlineKeyboardButton{})
			}
			rows[len(rows)-1] = append(rows[len(rows)-1], btn)
		}
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ì–æ—Ç–æ–≤–æ", "add_time_done"),
		))

		edit := tgbotapi.NewEditMessageReplyMarkup(
			cb.Message.Chat.ID,
			cb.Message.MessageID,
			tgbotapi.NewInlineKeyboardMarkup(rows...),
		)
		bot.Send(edit)

	case data == "add_time_done":
		info := AddState[userID]
		if info == nil || len(info["times"].([]string)) == 0 {
			bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, "‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤—Ä–µ–º—è."))
			return
		}

		rows := [][]tgbotapi.InlineKeyboardButton{
			{
				tgbotapi.NewInlineKeyboardButtonData("–û–Ω–ª–∞–π–Ω –ø–æ–∫–∞–∑", "add_type:–û–Ω–ª–∞–π–Ω –ø–æ–∫–∞–∑"),
				tgbotapi.NewInlineKeyboardButtonData("–í–∑–≤–æ–¥", "add_type:–í–∑–≤–æ–¥"),
				tgbotapi.NewInlineKeyboardButtonData("–õ—é–±–æ–µ", "add_type:–õ—é–±–æ–µ"),
			},
		}
		msg := tgbotapi.NewMessage(cb.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è:")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
		bot.Send(msg)

	case strings.HasPrefix(data, "add_time:"):
		timeStr := strings.TrimPrefix(data, "add_time:")
		if AddState[userID] == nil {
			AddState[userID] = map[string]interface{}{}
		}
		AddState[userID]["time"] = timeStr

		rows := [][]tgbotapi.InlineKeyboardButton{
			{
				tgbotapi.NewInlineKeyboardButtonData("–û–Ω–ª–∞–π–Ω –ø–æ–∫–∞–∑", "add_type:–û–Ω–ª–∞–π–Ω –ø–æ–∫–∞–∑"),
				tgbotapi.NewInlineKeyboardButtonData("–í–∑–≤–æ–¥", "add_type:–í–∑–≤–æ–¥"),
				tgbotapi.NewInlineKeyboardButtonData("–õ—é–±–æ–µ", "add_type:–õ—é–±–æ–µ"),
			},
		}
		msg := tgbotapi.NewMessage(cb.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è:")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
		bot.Send(msg)

	case strings.HasPrefix(data, "add_type:"):
		typeStr := strings.TrimPrefix(data, "add_type:")
		info := AddState[userID]
		if info == nil {
			bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞."))
			return
		}
		date := info["date"].(string)
		times := info["times"].([]string)
		var messages []string

		for _, t := range times {
			fullDate := fmt.Sprintf("%s %s", date, t)
			err := base.AddLesson("–ó–∞–Ω—è—Ç–∏–µ", typeStr, fullDate)
			if err != nil {
				messages = append(messages, fmt.Sprintf("‚ùå %s ‚Äî %s", t, err.Error()))
			} else {
				messages = append(messages, fmt.Sprintf("‚úÖ %s", t))
			}
		}

		result := "–î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–Ω—è—Ç–∏—è –Ω–∞ " + date + " –≤ :\n" + strings.Join(messages, "\n")
		bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, result))
		delete(AddState, userID)

	case strings.HasPrefix(data, "register_date:"):
		days, _ := strconv.Atoi(strings.TrimPrefix(data, "register_date:"))
		dateStr := formatDate(time.Now().AddDate(0, 0, days))

		lessons, err := base.GetLessonsByDate(dateStr)
		if err != nil || len(lessons) == 0 {
			bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É."))
			break
		}

		var rows [][]tgbotapi.InlineKeyboardButton
		for _, l := range lessons {
			label := fmt.Sprintf("%s ‚Äî %s", l.Title, l.Date[11:])
			callbackData := fmt.Sprintf("register:%d", l.ID)
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(label, callbackData)))
		}

		msg := tgbotapi.NewMessage(cb.Message.Chat.ID, fmt.Sprintf("–ó–∞–Ω—è—Ç–∏—è –Ω–∞ %s:", dateStr))
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
		bot.Send(msg)

	case strings.HasPrefix(data, "register:"):
		id, _ := strconv.Atoi(strings.TrimPrefix(data, "register:"))
		err := base.RegisterUserToLesson(cb.From.ID, id)
		text := "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!"
		if err != nil {
			text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è: " + err.Error()
		}
		bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, text))
	case strings.HasPrefix(data, "delete_lesson:"):
		idStr := strings.TrimPrefix(data, "delete_lesson:")
		id, err := strconv.Atoi(idStr)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID."))
			return
		}

		err = base.DeleteLesson(id)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: "+err.Error()))
		} else {
			bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, "‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω."))
		}
	}

	bot.AnswerCallbackQuery(tgbotapi.NewCallback(cb.ID, ""))
}
