package main

import (
	"log"
	"os"

	"github.com/dekatei/telegram-bot/base"
	"github.com/dekatei/telegram-bot/buttons"
	"github.com/dekatei/telegram-bot/handlers"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
)

const AdminID int = 288848928

func main() {

	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	dbFile := os.Getenv("DB_FILE")
	err = base.InitDB(dbFile)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", err)
	}

	//–ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞
	token := os.Getenv("TELEGRAM_TOKEN")
	if token == "" {
		log.Fatal("TELEGRAM_TOKEN not set in .env")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, _ := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.CallbackQuery != nil {
			handlers.HandleCallback(bot, update)
			continue
		}
		if update.Message == nil {
			continue
		}
		log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s", update.Message.From.UserName, update.Message.Text)
		userID := update.Message.From.ID

		switch update.Message.Text {
		case "/start":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
			msg.ReplyMarkup = buttons.MainMenu(update.Message.From.ID)
			bot.Send(msg)
			//log.Printf("–í–∞—à Telegram ID: %d", update.Message.From.ID)
		case "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ":
			if userID != AdminID {
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."))
				break
			}

			handlers.AddState[userID] = map[string]string{}
			rows := [][]tgbotapi.InlineKeyboardButton{
				{
					tgbotapi.NewInlineKeyboardButtonData("–°–µ–≥–æ–¥–Ω—è", "add_date:0"),
					tgbotapi.NewInlineKeyboardButtonData("–ó–∞–≤—Ç—Ä–∞", "add_date:1"),
					tgbotapi.NewInlineKeyboardButtonData("–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", "add_date:2"),
				},
			}
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:")
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
			bot.Send(msg)
		case "üìÖ –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π":
			text, err := buttons.LessonsListMessage()
			if err != nil {
				text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π."
			}
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, text))
		case "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è":
			text, err := buttons.RegisterMessage(update.Message.From.ID)
			if err != nil {
				text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏."
			}
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, text))

		case "üë§ –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è":
			text, err := buttons.MyLessonsMessage(update.Message.From.ID)
			if err != nil {
				text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π."
			}
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, text))
		default:
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é."))
		}
	}
}
